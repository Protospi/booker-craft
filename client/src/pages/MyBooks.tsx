import { useBooks } from "@/context/BookContext";
import { useLanguage } from "@/context/LanguageContext";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Eye, ChevronLeft, List, Download } from "lucide-react";
import { useCallback, useState, useEffect } from "react";
import { BookViewer } from "@/components/BookViewer";
import { Link, useLocation } from "wouter";
import { motion } from "framer-motion";
import { Book } from "@shared/schema";
import { generatePDF } from "@/lib/pdf";

export default function MyBooks() {
  const { savedBooks } = useBooks();
  const { t } = useLanguage();
  const [selectedBook, setSelectedBook] = useState<Book | null>(null);
  const [, setLocation] = useLocation();
  
  // Auto-select the most recently created book when navigating to this page
  useEffect(() => {
    if (savedBooks.length > 0 && !selectedBook) {
      setSelectedBook(savedBooks[savedBooks.length - 1]);
    }
  }, [savedBooks, selectedBook]);

  const handleViewBook = useCallback((book: Book) => {
    setSelectedBook(book);
  }, []);

  const handleCreateNew = useCallback(() => {
    setLocation("/");
  }, [setLocation]);
  
  const handleBackToList = useCallback(() => {
    setSelectedBook(null);
  }, []);

  // Function to handle PDF download
  const handleDownload = useCallback(async () => {
    if (selectedBook) {
      try {
        await generatePDF(selectedBook);
      } catch (error) {
        console.error('Error generating PDF:', error);
      }
    }
  }, [selectedBook]);

  if (selectedBook) {
    // Custom implementation of book viewer for My Books page
    return (
      <div className="pt-6 pb-16">
        <div className="container mx-auto px-4">
          <div className="flex justify-between items-center mb-6">
            <Button 
              variant="outline" 
              size="sm"
              className="flex items-center gap-1"
              onClick={handleBackToList}
            >
              <ChevronLeft className="h-4 w-4" />
              <List className="h-4 w-4 mr-1" />
              Back to All Books
            </Button>

            <div className="flex space-x-3">
              <Button 
                variant="default"
                className="bg-orange-500 hover:bg-orange-600"
                onClick={handleDownload}
              >
                <Download className="h-5 w-5 mr-2" />
                {t.bookViewer.downloadPdf}
              </Button>
              <Button 
                variant="outline" 
                onClick={handleCreateNew}
              >
                <Eye className="h-5 w-5 mr-2" />
                {t.bookViewer.createNew}
              </Button>
            </div>
          </div>
        </div>
        
        {/* We need to pass the book directly to BookViewer */}
        <div className="book-container mx-auto max-w-4xl">
          {/* Instead of rendering the full BookViewer component which includes its own buttons,
              we'll render the book directly using similar styling */}
          <div key={selectedBook.cover.title} className="book-content bg-white rounded-lg shadow-lg overflow-hidden">
            <div className="book-cover relative bg-gradient-to-r from-slate-800 to-slate-700 aspect-[2/3] max-h-[600px] w-full mx-auto rounded-md overflow-hidden">
              {selectedBook.cover.imageUrl && (
                <img 
                  src={selectedBook.cover.imageUrl} 
                  className="absolute inset-0 w-full h-full object-cover mix-blend-overlay opacity-30" 
                  alt="Book cover background" 
                />
              )}
              
              <div className="absolute inset-0 flex flex-col justify-between p-8 sm:p-12">
                <div className="text-center">
                  <h3 className="font-serif font-bold text-2xl sm:text-4xl text-white mb-2">
                    {selectedBook.cover.title}
                  </h3>
                  <p className="text-gray-300 text-sm sm:text-base italic">
                    {selectedBook.cover.subtitle}
                  </p>
                </div>
                
                {selectedBook.cover.centralImageUrl && (
                  <div className="text-center">
                    <img 
                      src={selectedBook.cover.centralImageUrl} 
                      className="w-32 h-32 sm:w-40 sm:h-40 mx-auto object-cover rounded-full border-4 border-white/30" 
                      alt="Book cover central image" 
                    />
                  </div>
                )}
                
                <div className="text-center">
                  <p className="text-gray-200 text-sm">Generated by AI</p>
                  <p className="text-white font-medium mt-2">
                    {new Date().toLocaleDateString('en-US', { 
                      year: 'numeric', 
                      month: 'long' 
                    })}
                  </p>
                </div>
              </div>
            </div>
            
            {/* Show table of contents */}
            <div className="p-8 bg-white">
              <h2 className="font-serif text-2xl font-bold mb-6 pb-2 border-b border-gray-200">
                {t.bookViewer.tableOfContents}
              </h2>
              <ul className="space-y-3">
                {selectedBook.chapters.map((chapter) => (
                  <li 
                    key={chapter.number} 
                    className="flex items-baseline p-2 hover:bg-gray-50 rounded cursor-pointer transition-colors"
                  >
                    <span className="font-medium">Chapter {chapter.number}:</span>
                    <span className="flex-grow border-b border-dotted border-gray-300 mx-2"></span>
                    <span>{chapter.title}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-10">
      <div className="mb-8">
        <h1 className="text-3xl font-serif font-bold text-gray-900 mb-2">
          {t.header.myBooks}
        </h1>
        <p className="text-gray-600">
          {savedBooks.length > 0
            ? "Here are all your created books. Click on any book to view it."
            : "You haven't created any books yet. Go to the home page to create your first book!"}
        </p>
      </div>

      {savedBooks.length === 0 ? (
        <div className="text-center py-16">
          <div className="mb-4 text-gray-400">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-16 w-16 mx-auto"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={1}
                d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
              />
            </svg>
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">No books found</h3>
          <p className="text-gray-600 mb-6">Start creating your first AI-powered book now</p>
          <Button 
            className="bg-orange-500 hover:bg-orange-600"
            onClick={() => setLocation("/")}
          >
            Create Your First Book
          </Button>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {savedBooks.map((book, index) => (
            <motion.div
              key={book.cover.title + index}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
            >
              <Card className="h-full overflow-hidden transition-all duration-300 hover:shadow-lg">
                <div className="relative aspect-[3/4] w-full overflow-hidden">
                  <img
                    src={book.cover.imageUrl}
                    alt={book.cover.title}
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent">
                    <div className="absolute bottom-4 left-4 right-4">
                      <h3 className="text-white font-bold text-xl mb-1 line-clamp-2">
                        {book.cover.title}
                      </h3>
                      <p className="text-gray-200 text-sm line-clamp-2">
                        {book.cover.subtitle}
                      </p>
                    </div>
                  </div>
                </div>
                <CardContent className="p-4 flex flex-col space-y-4">
                  <div className="flex flex-wrap gap-2">
                    {book.chapters.length > 0 && (
                      <Badge variant="outline" className="text-xs">
                        {book.chapters.length} chapters
                      </Badge>
                    )}
                    <Badge variant="secondary" className="text-xs">
                      {new Date().toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                      })}
                    </Badge>
                  </div>
                  
                  {/* Display total pages count */}
                  <div className="text-sm text-gray-600">
                    <span className="font-medium">Total pages:</span> {book.chapters.reduce((total, chapter) => total + chapter.pages.length, 0) + 2} {/* +2 for cover and TOC */}
                  </div>
                  
                  <div className="flex justify-between items-center">
                    <Button 
                      variant="ghost" 
                      size="sm"
                      className="text-gray-600 hover:text-gray-900"
                      onClick={() => handleViewBook(book)}
                    >
                      <Eye className="h-4 w-4 mr-1" />
                      View Book
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>
      )}
    </div>
  );
}