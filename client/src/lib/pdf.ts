import { Book } from "@shared/schema";
import { toast } from "@/hooks/use-toast";
import html2pdf from 'html2pdf.js';

export const generatePDF = async (book: Book): Promise<void> => {
  try {
    // Create an HTML representation of the book
    const container = document.createElement('div');
    container.className = 'pdf-container';
    container.style.fontFamily = 'Arial, sans-serif';
    
    // Add cover page
    const coverPage = document.createElement('div');
    coverPage.style.position = 'relative';
    coverPage.style.height = '11in';
    coverPage.style.width = '8.5in';
    coverPage.style.overflow = 'hidden';
    coverPage.style.backgroundColor = '#1a2b3c';
    coverPage.style.color = 'white';
    coverPage.style.display = 'flex';
    coverPage.style.flexDirection = 'column';
    coverPage.style.alignItems = 'center';
    coverPage.style.justifyContent = 'space-between';
    coverPage.style.padding = '2cm';
    coverPage.style.boxSizing = 'border-box';
    
    // Background image with overlay
    if (book.cover.imageUrl) {
      coverPage.style.backgroundImage = `url(${book.cover.imageUrl})`;
      coverPage.style.backgroundSize = 'cover';
      coverPage.style.backgroundPosition = 'center';
      
      // Overlay for better text visibility
      const overlay = document.createElement('div');
      overlay.style.position = 'absolute';
      overlay.style.top = '0';
      overlay.style.left = '0';
      overlay.style.width = '100%';
      overlay.style.height = '100%';
      overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
      overlay.style.zIndex = '1';
      coverPage.appendChild(overlay);
    }
    
    // Book title and subtitle
    const titleContainer = document.createElement('div');
    titleContainer.style.position = 'relative';
    titleContainer.style.zIndex = '2';
    titleContainer.style.textAlign = 'center';
    titleContainer.style.marginTop = '3cm';
    
    const titleElement = document.createElement('h1');
    titleElement.style.fontSize = '32px';
    titleElement.style.marginBottom = '0.5cm';
    titleElement.style.fontWeight = 'bold';
    titleElement.textContent = book.cover.title;
    titleContainer.appendChild(titleElement);
    
    const subtitleElement = document.createElement('h2');
    subtitleElement.style.fontSize = '20px';
    subtitleElement.style.fontStyle = 'italic';
    subtitleElement.style.fontWeight = 'normal';
    subtitleElement.style.color = '#ccc';
    subtitleElement.textContent = book.cover.subtitle;
    titleContainer.appendChild(subtitleElement);
    
    coverPage.appendChild(titleContainer);
    
    // Central image if available
    if (book.cover.centralImageUrl) {
      const centralImageContainer = document.createElement('div');
      centralImageContainer.style.position = 'relative';
      centralImageContainer.style.zIndex = '2';
      centralImageContainer.style.textAlign = 'center';
      centralImageContainer.style.margin = '2cm 0';
      
      const centralImage = document.createElement('img');
      centralImage.src = book.cover.centralImageUrl;
      centralImage.style.width = '5cm';
      centralImage.style.height = '5cm';
      centralImage.style.borderRadius = '50%';
      centralImage.style.objectFit = 'cover';
      centralImage.style.border = '5px solid rgba(255, 255, 255, 0.3)';
      
      centralImageContainer.appendChild(centralImage);
      coverPage.appendChild(centralImageContainer);
    }
    
    // Footer information
    const footerContainer = document.createElement('div');
    footerContainer.style.position = 'relative';
    footerContainer.style.zIndex = '2';
    footerContainer.style.textAlign = 'center';
    footerContainer.style.marginBottom = '2cm';
    
    const generatedText = document.createElement('p');
    generatedText.textContent = 'Generated by AI';
    generatedText.style.fontSize = '14px';
    generatedText.style.color = '#aaa';
    footerContainer.appendChild(generatedText);
    
    const dateText = document.createElement('p');
    dateText.textContent = new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long' });
    dateText.style.fontSize = '16px';
    dateText.style.marginTop = '0.5cm';
    footerContainer.appendChild(dateText);
    
    coverPage.appendChild(footerContainer);
    container.appendChild(coverPage);
    
    // Add table of contents
    const tocPage = document.createElement('div');
    tocPage.style.height = '11in';
    tocPage.style.width = '8.5in';
    tocPage.style.padding = '2cm';
    tocPage.style.boxSizing = 'border-box';
    tocPage.style.backgroundColor = 'white';
    tocPage.style.pageBreakBefore = 'always';
    
    const tocTitle = document.createElement('h1');
    tocTitle.textContent = 'Table of Contents';
    tocTitle.style.fontSize = '24px';
    tocTitle.style.marginBottom = '1cm';
    tocTitle.style.paddingBottom = '0.5cm';
    tocTitle.style.borderBottom = '1px solid #eee';
    tocPage.appendChild(tocTitle);
    
    const tocList = document.createElement('ul');
    tocList.style.listStyleType = 'none';
    tocList.style.padding = '0';
    tocList.style.margin = '0';
    
    book.chapters.forEach(chapter => {
      const listItem = document.createElement('li');
      listItem.style.marginBottom = '0.8cm';
      listItem.style.position = 'relative';
      listItem.style.display = 'flex';
      listItem.style.justifyContent = 'space-between';
      listItem.style.borderBottom = '1px dotted #ccc';
      listItem.style.paddingBottom = '0.3cm';
      
      const chapterLabel = document.createElement('span');
      chapterLabel.textContent = `Chapter ${chapter.number}: ${chapter.title}`;
      chapterLabel.style.fontWeight = 'normal';
      chapterLabel.style.fontSize = '16px';
      listItem.appendChild(chapterLabel);
      
      tocList.appendChild(listItem);
    });
    
    tocPage.appendChild(tocList);
    container.appendChild(tocPage);
    
    // Add chapters
    book.chapters.forEach((chapter, chapterIndex) => {
      chapter.pages.forEach((page, pageIndex) => {
        const contentPage = document.createElement('div');
        contentPage.style.height = '11in';
        contentPage.style.width = '8.5in';
        contentPage.style.padding = '2cm';
        contentPage.style.boxSizing = 'border-box';
        contentPage.style.backgroundColor = 'white';
        contentPage.style.pageBreakBefore = 'always';
        
        // Add chapter title if it's the start of a chapter
        if (page.isChapterStart) {
          const chapterTitle = document.createElement('h2');
          chapterTitle.textContent = `Chapter ${chapter.number}: ${chapter.title}`;
          chapterTitle.style.fontSize = '20px';
          chapterTitle.style.marginBottom = '1cm';
          contentPage.appendChild(chapterTitle);
          
          // Add chapter image if available
          if (page.imageUrl) {
            const chapterImage = document.createElement('img');
            chapterImage.src = page.imageUrl;
            chapterImage.style.width = '100%';
            chapterImage.style.maxHeight = '5cm';
            chapterImage.style.objectFit = 'cover';
            chapterImage.style.marginBottom = '1cm';
            chapterImage.style.borderRadius = '5px';
            contentPage.appendChild(chapterImage);
          }
        }
        
        // Add page content
        const contentDiv = document.createElement('div');
        contentDiv.innerHTML = page.content;
        contentDiv.style.fontSize = '12pt';
        contentDiv.style.lineHeight = '1.5';
        contentPage.appendChild(contentDiv);
        
        container.appendChild(contentPage);
      });
    });
    
    // Temporary add to document for HTML2PDF to work with it
    document.body.appendChild(container);
    
    // Configure pdf options
    const opt = {
      margin: [0, 0, 0, 0],
      filename: `${book.cover.title.replace(/\s+/g, "_")}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { 
        scale: 2, 
        useCORS: true,
        scrollX: 0,
        scrollY: 0,
      },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    };
    
    // Generate and save PDF
    html2pdf().from(container).set(opt).save().then(() => {
      // Clean up - remove the container from document
      document.body.removeChild(container);
      toast({
        title: "PDF Generated Successfully",
        description: "Your book has been downloaded as a PDF file.",
      });
    }).catch((error) => {
      console.error("Error in html2pdf:", error);
      // Clean up even on error
      if (document.body.contains(container)) {
        document.body.removeChild(container);
      }
      toast({
        title: "PDF Generation Failed",
        description: "There was an error creating your PDF. Please try again.",
        variant: "destructive",
      });
    });
    
  } catch (error) {
    console.error("Error generating PDF:", error);
    toast({
      title: "PDF Generation Failed",
      description: "There was an error creating your PDF. Please try again.",
      variant: "destructive",
    });
  }
};
