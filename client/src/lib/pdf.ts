import { Book } from "@shared/schema";
import { jsPDF } from "jspdf";
import { useToast } from "@/hooks/use-toast";

export const generatePDF = async (book: Book): Promise<void> => {
  try {
    // Create a new PDF document (A4 format)
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4"
    });
    
    // Set font styles
    doc.setFont("helvetica", "bold");
    
    // Add cover page
    doc.setFontSize(24);
    doc.text(book.cover.title, 105, 60, { align: "center" });
    
    doc.setFontSize(16);
    doc.setFont("helvetica", "italic");
    doc.text(book.cover.subtitle, 105, 70, { align: "center" });
    
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    doc.text("Generated by AI", 105, 200, { align: "center" });
    doc.text(new Date().toLocaleDateString("en-US", { year: "numeric", month: "long" }), 105, 208, { align: "center" });
    
    // Add table of contents
    doc.addPage();
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.text("Table of Contents", 20, 20);
    
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    
    let yPosition = 40;
    book.chapters.forEach((chapter, index) => {
      doc.text(`Chapter ${chapter.number}: ${chapter.title}`, 20, yPosition);
      yPosition += 10;
    });
    
    // Add chapters and their contents
    book.chapters.forEach((chapter) => {
      chapter.pages.forEach((page, pageIndex) => {
        doc.addPage();
        
        if (pageIndex === 0) {
          // Chapter title page
          doc.setFont("helvetica", "bold");
          doc.setFontSize(18);
          doc.text(`Chapter ${chapter.number}: ${chapter.title}`, 20, 20);
          doc.setFont("helvetica", "normal");
          doc.setFontSize(12);
        }
        
        // This is a simplified approach for content conversion
        // In a real implementation, you'd need to parse the HTML and format it properly
        const tempElement = document.createElement("div");
        tempElement.innerHTML = page.content;
        const textContent = tempElement.textContent || tempElement.innerText;
        
        // Split text into lines to fit in PDF
        const textLines = doc.splitTextToSize(textContent, 170);
        
        // Starting position for text
        let textY = pageIndex === 0 ? 40 : 20;
        
        // Add text with word wrapping
        doc.text(textLines, 20, textY);
      });
    });
    
    // Save the PDF
    doc.save(`${book.cover.title.replace(/\s+/g, "_")}.pdf`);
    
  } catch (error) {
    console.error("Error generating PDF:", error);
    const { toast } = useToast();
    toast({
      title: "PDF Generation Failed",
      description: "There was an error creating your PDF. Please try again.",
      variant: "destructive",
    });
  }
};
